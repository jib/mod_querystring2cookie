######################
### Introduction
######################

This module allows a set of query string arguments to be returned
as a list of Set-Cookie directives. The main use case for this is
to be able to store arbitrary data in the cookie store for domain
X, while the call comes from domain Y.

This is quite common when operating widgets or other utilitarian
JavaScript as a service for third party webpages.


######################
### Example
######################

A call to an endpoint with this module enabled might look like this:

  curl -Is http://example.com/?a=1&b=2&c

And the resulting Set-Cookie header would look like this:

  Set-Cookie: qs2cookie=a|1^b|2; path=/; expires=Wed, 08-Aug-12 18:15:11 GMT

A lot of the formatting and settings can be tuned to your needs.
See below for details/examples.

######################
### Configuration
######################

Note: All the directives can be either set in the server config, virtual host,
directory or .htaccess sections of the configuration.

*** QS2Cookie directive
    Syntax:     QS2Cookie on|off
    Default:    QS2Cookie off

    When mod_querystring2cookie is loaded, and QS2Cookie on is set, Apache will convert
    the query params of the request into a Set-Cookie header. This directive can be used
    to turn this behavior on or off on a per-server or per-directory basis. By default,
    enabling mod_querystring2cookie will not activate cookies.

*** QS2CookieEnableIfDNT directive
    Syntax:     QS2CookieEnableIfDNT on|off
    Default:    QS2CookieEnableIfDNT off

    This directive controls whether mod_querystring2cookie will set a cookie if the a
    "Do Not Track" header is present. If you wish to ignore the "Do Not Track" header,
    set this directive to on.

    Note it's considered good industry practice to comply with Do Not Track and we
    urge you to leave this directive disabled if you are operating a third party
    service. Ignoring "Do Not Track" for first party services can be acceptable.
    Please be a good internet citizen.

*** QS2CookieEncodeInKey directive
    Syntax:     QS2CookieEncodeInKey on|off
    Default:    QS2CookieEncodeInKey off

    This directive controls whether mod_querystring2cookie will encode the key/value
    pairs as part of the cookie KEY or the cookie VALUE. By default, it will encode
    the query parameters in the value. So a call like this:

      curl -Is http://example.com/?a=1&b=2&c

    Would encode like this:

      qs2cookie=a|1^b|2;

    But if you set this diretive to On, the query parameters will be encoded into
    the key like this, and the value will be set to the timestamp of when the cookie
    was created:

      qs2cookie^a|1^b|2=1344363312

    This is particularly useful if your combination of query parameters forms a unique
    signature, rather than the individual query parameters only ever having one value
    at a time.

*** QS2CookieExpires directive
    Syntax:     QS2CookieExpires expiry-period
    Default:    NULL

    This directive sets an expiry time on the cookie generated by mod_querystring2cookie.
    The expiry-period must be given as a number of seconds.

    If this directive is not used, no expires entry is included in the cookie header
    field, meaning the cookie will last only for the current browser session.

*** QS2CookieMaxSize directive
    Syntax:     QS2CookieMaxSize size
    Default:    1024

    This directive sets a maximum size on the cookie key/value pair generated by      mod_querystring2cookie. The size must be given as an integer, in bytes.

    mod_querystring2cookie will keep adding pairs to the key/value as long as adding
    the pair does not overflow the max size. If it would, that pair is skipped, and
    the next pair is evaluated. This means that mod_querystring2cookie will attempt
    to encode as much data up to max size into the cookie key/value as permitted.

    Note that section 5.3 of the RFC states that an individual cookie can be at least
    4096 bytes long: http://www.ietf.org/rfc/rfc2965.txt

*** QS2CookieDomain directive
    Syntax:     QS2CookieDomain domain
    Default:    NULL

    This directive controls the setting of the domain to which the tracking cookie
    applies. If not present, no domain is included in the cookie header field.

    The domain string must begin with a dot, and must include at least one embedded dot.
    That is, .example.com is legal, but foo.example.com and .com are not.

    Most browsers in use today will not allow cookies to be set for a two-part top level
    domain, such as .co.uk, although such a domain ostensibly fulfills the requirements
    above. These domains are equivalent to top level domains such as .com, and allowing
    such cookies may be a security risk. Thus, if you are under a two-part top level
    domain, you should still use your actual domain, as you would with any other top level
    domain (for example, use .foo.co.uk).

*** QS2CookiePrefix directive
    Syntax:     QS2CookiePrefix token
    Default:    NULL

    This directive allows you to add a prefix to all the cookie keys that it generates.
    This can help you track which cookies have come from this module, versus other
    cookies you may have set.

    By default, no prefix is added.


*** QS2CookieName directive
    Syntax:     QS2CookieName token
    Default:    QS2CookieName qs2cookie

    This directive allows you to change the name of the cookie this module uses for its
    tracking purposes. By default the cookie is named "qs2cookie".

    You must specify a valid cookie name; for maximum browser compatibility use only
    ascii characters, and do not use a semicolon, comma, equals sign. See the RFC for
    details: http://www.ietf.org/rfc/rfc2965.txt

*** QS2CookieNameFrom directive
    Syntax:     QS2CookieNameFrom token
    Default:    NULL

    This directive allows you to dynamically set the cookie name based on the query
    parameters that are being sent. Note that the key/value pair used for determining
    the cookie name will not be part of it's value. For example, using the setting
    "QS2CookieNameFrom x", the request:

        curl -Is http://example.com/?x=cookie_name&a=1&b=2&c

    Would result in an encoded cookie like:

        cookie_name=a|1^b|2;

    This setting overrides the QS2CookieName directive. This also means that if you
    set this directive, the string MUST be in the query paramaters to set a valid
    cookie. There is no fallback. If cookie setting fails, the header "X-QS2Cookie"
    will be set with a descriptive error message.

*** QS2CookiePairDelimiter directive
    Syntax:     QS2CookiePairDelimiter token
    Default:    QS2CookiePairDelimiter ^

    This directive controls the delimiter used for pairs. For example, if setting this
    directive to "+", the following call:

        curl -Is http://example.com/?a=1&b=2&c

    Would result in the following encoding:

        qs2cookie=a|1+b|2;

*** QS2CookieKeyValueDelimiter directive
    Syntax:     QS2CookieKeyValueDelimiter token
    Default:    QS2CookieKeyValueDelimiter |

    This directive controls the delimiter used for pairs. For example, if setting this
    directive to "+", the following call:

        curl -Is http://example.com/?a=1&b=2&c

    Would result in the following encoding:

        qs2cookie=a+1^b+2;

*** QS2CookieIgnore directive
    Syntax:     QS2CookieIgnore String1 String2 ...
    Default:    NULL

    This directive lets you list some query parameters as exempt from being encoded
    in the resulting cookie key/value. This allows you to blacklist attributes on
    an as needed basis.
